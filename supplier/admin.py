# admin.py
from django.contrib import admin
from django.urls import path, reverse
from django.shortcuts import render, redirect
from django import forms
from django.contrib import messages
from django.utils.html import format_html
from .models import Supplier
from product.models import Product
import openpyxl
import xlrd
from decimal import Decimal, InvalidOperation
from tempfile import NamedTemporaryFile
import os
from openpyxl.utils.exceptions import InvalidFileException
# admin.py
from django import forms
from .utils import excel_column_to_index
from app_settings.models import GlobalSettings

#–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞ –¥–æ–ª–ª–∞—Ä –¥–æ–ª–∂–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø–æ –∫—É—Ä—Å—É

# admin.py
class ImportProductsForm(forms.Form):
    excel_file = forms.FileField(
        label="Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏",
        help_text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .xls –∏ .xlsx"
    )
    article_col = forms.CharField(
        label="–ö–æ–ª–æ–Ω–∫–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: C)",
        initial="C",
        max_length=3
    )
    name_col = forms.CharField(
        label="–ö–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: A)",
        initial="A",
        max_length=3
    )
    price_col = forms.CharField(
        label="–ö–æ–ª–æ–Ω–∫–∞ —Å —Ü–µ–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: B)",
        initial="B",
        max_length=3
    )
    currency = forms.ChoiceField(
        label="–í–∞–ª—é—Ç–∞ –≤ —Ñ–∞–π–ª–µ",
        choices=(('RUB', '–†—É–±–ª—å'), ('USD', '–î–æ–ª–ª–∞—Ä –°–®–ê')),
        initial='RUB',
        widget=forms.RadioSelect
    )

    def clean(self):
        cleaned_data = super().clean()
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫
        columns = ['article_col', 'name_col', 'price_col']
        for col in columns:
            try:
                cleaned_data[f'{col}_index'] = excel_column_to_index(cleaned_data.get(col, ''))
            except ValueError:
                self.add_error(col, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞
        currency = cleaned_data.get('currency')
        if currency == 'USD':
            global_settings = GlobalSettings.get_instance()
            if not global_settings.dollar_exchange_rate:
                self.add_error('currency', "–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        
        return cleaned_data


class ProductInline(admin.TabularInline):
    model = Product
    extra = 1




@admin.register(Supplier)
class SupplierAdmin(admin.ModelAdmin):
    list_display = ('name', 'email', 'import_products_link')
    inlines = [ProductInline]
    search_fields = ('name', 'email')

    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path(
                '<path:object_id>/import-products/',
                self.admin_site.admin_view(self.import_products_view),
                name='import_products'
            ),
        ]
        return custom_urls + urls


    def import_products_link(self, obj):
        return format_html(
            '<a href="{}" class="button">üì• –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤</a>',
            reverse('admin:import_products', args=[obj.pk])
        )
    import_products_link.short_description = "–ò–º–ø–æ—Ä—Ç"


    def import_products_view(self, request, object_id):
        supplier = Supplier.objects.get(pk=object_id)
        form = ImportProductsForm(request.POST or None, request.FILES or None)

        if request.method == 'POST' and form.is_valid():
            tmp_file = None
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
                currency = form.cleaned_data['currency']
                global_settings = GlobalSettings.get_instance()
                usd_rate = global_settings.dollar_exchange_rate
                article_col = form.cleaned_data['article_col_index']
                name_col = form.cleaned_data['name_col_index']
                price_col = form.cleaned_data['price_col_index']

                excel_file = form.cleaned_data['excel_file']
                file_extension = os.path.splitext(excel_file.name)[1].lower()

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
                with NamedTemporaryFile(delete=False, suffix=file_extension) as tmp:
                    for chunk in excel_file.chunks():
                        tmp.write(chunk)
                    tmp_file = tmp.name

                rows = []
                if file_extension == '.xlsx':
                    wb = openpyxl.load_workbook(tmp_file, data_only=True, read_only=True)
                    ws = wb.active
                    rows = ws.iter_rows(min_row=2)
                elif file_extension == '.xls':
                    wb = xlrd.open_workbook(tmp_file)
                    ws = wb.sheet_by_index(0)
                    rows = [ws.row(rowx) for rowx in range(1, ws.nrows)]

                created = updated = 0
                errors = []

                for row_idx, row in enumerate(rows, start=2):
                    try:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏
                        if file_extension == '.xlsx':
                            cells = row
                            get_val = lambda cell: cell.value
                        else:
                            cells = row
                            get_val = lambda cell: cell.value

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
                        max_col = max(article_col, name_col, price_col)
                        if max_col >= len(cells):
                            raise IndexError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ {row_idx}")
                        
                        


                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π None
                        article = str(get_val(cells[article_col])) if cells[article_col].value else None
                        name = str(get_val(cells[name_col])) if cells[name_col].value else None
                        price = str(get_val(cells[price_col])) if cells[price_col].value else None
                        

                        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                        if not all([article, name, price]):
                            raise ValueError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                        
                        try:
                            price_value = Decimal(str(price).replace(',', '.'))
                        except InvalidOperation as e:
                            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {str(e)}")

                        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã
                        if currency == 'USD':
                            price_value = price_value * usd_rate  # –¢–µ–ø–µ—Ä—å price_value –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞

                        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                        data = {
                            'name': name.strip(),
                            'price': price_value,
                            'article': article.strip(),
                            'supplier': supplier,
                            'is_visible': True,
                            'quantity': 100  # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        }

                        # –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                        _, created_flag = Product.objects.update_or_create(
                            supplier=supplier,
                            article=data['article'],
                            defaults=data
                        )

                        if created_flag:
                            created += 1
                        else:
                            updated += 1

                    except Exception as e:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: {str(e)}")

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
                msg = f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {created + updated} –∑–∞–ø–∏—Å–µ–π. –°–æ–∑–¥–∞–Ω–æ: {created}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}"
                if errors:
                    msg += f" | –û—à–∏–±–∫–∏: {len(errors)}"
                    messages.warning(request, f"{msg} | –ü–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫: {', '.join(errors[:5])}")
                else:
                    messages.success(request, msg)

                return redirect(reverse('admin:%s_%s_changelist' % (Product._meta.app_label, Product._meta.model_name)))

            except Exception as e:
                messages.error(request, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            finally:
                if tmp_file and os.path.exists(tmp_file):
                    os.unlink(tmp_file)

        context = self.admin_site.each_context(request)
        context.update({
            'form': form,
            'supplier': supplier,
            'opts': self.model._meta,
            'title': '–ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤'
        })
        return render(request, 'admin/import_products.html', context)